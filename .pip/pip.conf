# ~/.pip/pip.conf - pip configuration
# Configuration file for Python package installer (pip)

[global]
# =============================================================================
# INDEX AND REPOSITORY SETTINGS
# =============================================================================

# Primary index URL
 index-url        = https://pypi.org/simple/

# Additional index URLs for private packages
# extra-index-url =
#     https://pypi.company.com/simple/
#     https://test.pypi.org/simple/

# Trusted hosts (for HTTP repositories)
# trusted-host =
#     pypi.company.com
#     localhost
# =============================================================================
# CACHE SETTINGS
# =============================================================================
# Cache directory
 cache-dir        = ~/.cache/pip

# Disable cache
# no-cache-dir = false

# =============================================================================
# DOWNLOAD AND INSTALLATION
# =============================================================================
# Download timeout in seconds
 timeout          = 60

# Number of retries
 retries          = 3

# Download directory for packages
# download-cache = ~/.cache/pip/downloads

# Build directory
# build-dir = /tmp/pip-build
# =============================================================================
# DEPENDENCY RESOLUTION
# =============================================================================
# Use new dependency resolver
 use-feature      = 2020-resolver

# Disable dependency resolution backtracking
# no-deps = false

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
# Require HTTPS for repositories
# require-virtualenv = false
# Certificate bundle file
# cert = /path/to/certificate.pem
# Client certificate
# client-cert = /path/to/client.pem
# =============================================================================
# PACKAGE PREFERENCES
# =============================================================================
# Prefer binary packages over source packages
 prefer-binary    = true

# Only use binary packages
# only-binary = :all:

# Never use binary packages (compile from source)
# no-binary = :none:
# =============================================================================
# USER INSTALLATION
# =============================================================================
# Install packages to user directory
# user = true
# =============================================================================
# UPGRADE SETTINGS
# =============================================================================
# Upgrade strategy (eager, only-if-needed)
 upgrade-strategy = only-if-needed

# =============================================================================
# OUTPUT AND LOGGING
# =============================================================================

# Verbosity level (-v, -vv, -vvv)
# verbose = 1
# Quiet output
# quiet = 0
# Progress bar style (off, on, pretty, emoji)
 progress-bar     = pretty

# =============================================================================
# PROXY SETTINGS
# =============================================================================

# HTTP proxy
# proxy = http://proxy.company.com:8080
# =============================================================================
# PLATFORM SETTINGS
# =============================================================================
# Force platform for package selection
# platform = linux_x86_64
# Python implementation
# implementation = cpython
# Python version
# python-version = 3.9
# ABI tag
# abi = cp39
# =============================================================================
# INSTALL SETTINGS
# =============================================================================
[install]
# Default installation options

# Install packages to user directory by default
# user = true

# Compile Python source files to bytecode
 compile          = true

# Install dependencies
# no-deps = false

# Ignore package dependencies
# ignore-installed = false
# Force reinstallation
# force-reinstall = false
# Upgrade all packages
# upgrade = false
# Install pre-release and development versions
# pre = false
# =============================================================================
# FREEZE SETTINGS
# =============================================================================
[freeze]
# Options for pip freeze command

# Timeout for freeze operations
 timeout          = 15

# =============================================================================
# LIST SETTINGS
# =============================================================================

[list]
# Options for pip list command

# Format for output (columns, freeze, json)
 format           = columns

# =============================================================================
# WHEEL SETTINGS
# =============================================================================

[wheel]
# Options for wheel operations

# Directory to store built wheels
# wheel-dir = ~/.cache/pip/wheels

# =============================================================================
# NOTES
# =============================================================================
# This configuration provides:
# 1. Sensible defaults for package installation
# 2. Security-focused settings
# 3. Caching configuration for faster installs
# 4. Support for private repositories
# 5. Modern dependency resolution
# Configuration file locations (in order of precedence):
# 1. $PIP_CONFIG_FILE
# 2. $XDG_CONFIG_HOME/pip/pip.conf (Linux)
# 3. ~/.config/pip/pip.conf (Linux)
# 4. ~/.pip/pip.conf (macOS/Linux)
# 5. %APPDATA%\pip\pip.ini (Windows)
# Environment variables that override config:
# PIP_INDEX_URL, PIP_EXTRA_INDEX_URL, PIP_TRUSTED_HOST, etc.
# Common pip commands:
# pip install package-name              # Install package
# pip install -r requirements.txt       # Install from requirements
# pip install --upgrade package-name    # Upgrade package
# pip list --outdated                   # Show outdated packages
# pip freeze > requirements.txt         # Generate requirements file
# pip show package-name                 # Show package information
# pip search search-term                # Search for packages (deprecated)
# For development workflows:
# pip install -e .                      # Install package in editable mode
# pip install -e .[dev]                 # Install with optional dependencies
# For private packages:
# pip install --extra-index-url https://pypi.company.com/simple/ private-package
# Virtual environment best practices:
# Always use virtual environments for project isolation
# Consider using pipenv, poetry, or conda for dependency management
