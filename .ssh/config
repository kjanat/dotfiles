# ~/.ssh/config - SSH Client Configuration
# Secure and convenient SSH client settings

# =============================================================================
# GLOBAL DEFAULTS
# =============================================================================

# Global settings that apply to all hosts unless overridden
Host *
    # Connection settings
    ServerAliveInterval 60
    ServerAliveCountMax 3
    ConnectTimeout 10
    
    # Security settings
    Protocol 2
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512
    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512
    HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256
    
    # Key management
    AddKeysToAgent yes
    UseKeychain yes
    IdentitiesOnly yes
    
    # Connection multiplexing for faster subsequent connections
    ControlMaster auto
    ControlPath ~/.ssh/master-%r@%h:%p
    ControlPersist 10m
    
    # Disable unnecessary features for security
    ForwardX11 no
    ForwardAgent no
    GSSAPIAuthentication no
    
    # Compression for slow connections (can be disabled for fast networks)
    Compression yes
    
    # Prevent SSH from adding hosts to known_hosts automatically
    StrictHostKeyChecking ask
    
    # Hash known_hosts for privacy
    HashKnownHosts yes

# =============================================================================
# EXAMPLE HOST CONFIGURATIONS
# =============================================================================

# Example: Personal server
# Host myserver
#     HostName server.example.com
#     User myusername
#     Port 22
#     IdentityFile ~/.ssh/id_ed25519_personal
#     ForwardAgent yes

# Example: Work server with jump host
# Host workserver
#     HostName 10.0.1.100
#     User work_user
#     ProxyJump jump.company.com
#     IdentityFile ~/.ssh/id_rsa_work
#     LocalForward 8080 localhost:8080

# Example: Jump/Bastion host
# Host jump
#     HostName jump.company.com
#     User jump_user
#     IdentityFile ~/.ssh/id_rsa_work
#     ForwardAgent yes

# Example: GitHub configuration
# Host github.com
#     HostName github.com
#     User git
#     IdentityFile ~/.ssh/id_ed25519_github
#     UseKeychain yes
#     AddKeysToAgent yes

# Example: GitLab configuration
# Host gitlab.com
#     HostName gitlab.com
#     User git
#     IdentityFile ~/.ssh/id_ed25519_gitlab
#     UseKeychain yes
#     AddKeysToAgent yes

# Example: Local development VMs
# Host vm1
#     HostName 192.168.1.100
#     User developer
#     IdentityFile ~/.ssh/id_rsa_local
#     StrictHostKeyChecking no
#     UserKnownHostsFile /dev/null

# Example: AWS EC2 instances
# Host aws-web
#     HostName ec2-xxx-xxx-xxx-xxx.compute-1.amazonaws.com
#     User ec2-user
#     IdentityFile ~/.ssh/aws-key.pem
#     ServerAliveInterval 30

# Example: Multiple servers with same settings
# Host server1 server2 server3
#     HostName %h.company.com
#     User admin
#     IdentityFile ~/.ssh/id_rsa_company
#     Port 2222

# =============================================================================
# DEVELOPMENT ENVIRONMENTS
# =============================================================================

# Example: Docker containers via SSH
# Host docker-dev
#     HostName localhost
#     Port 2222
#     User developer
#     IdentityFile ~/.ssh/id_rsa_docker
#     StrictHostKeyChecking no
#     UserKnownHostsFile /dev/null

# Example: WSL from Windows
# Host wsl
#     HostName localhost
#     User username
#     Port 22
#     IdentityFile ~/.ssh/id_rsa

# =============================================================================
# SPECIAL CONFIGURATIONS
# =============================================================================

# Example: SOCKS proxy through SSH
# Host proxy
#     HostName proxy.example.com
#     User proxy_user
#     IdentityFile ~/.ssh/id_rsa_proxy
#     DynamicForward 1080
#     LocalForward 8080 localhost:8080

# Example: X11 forwarding for GUI applications
# Host gui-server
#     HostName gui.example.com
#     User gui_user
#     IdentityFile ~/.ssh/id_rsa_gui
#     ForwardX11 yes
#     ForwardX11Trusted yes

# Example: File synchronization server
# Host backup
#     HostName backup.example.com
#     User backup_user
#     IdentityFile ~/.ssh/id_rsa_backup
#     Compression yes
#     ServerAliveInterval 30

# =============================================================================
# WILDCARD PATTERNS
# =============================================================================

# Example: Company internal servers
# Host *.company.com
#     User company_user
#     IdentityFile ~/.ssh/id_rsa_company
#     ProxyJump jump.company.com

# Example: Development environment pattern
# Host dev-*
#     User developer
#     IdentityFile ~/.ssh/id_rsa_dev
#     StrictHostKeyChecking no
#     UserKnownHostsFile /dev/null

# Example: Production environment pattern
# Host prod-*
#     User admin
#     IdentityFile ~/.ssh/id_rsa_prod
#     StrictHostKeyChecking yes

# =============================================================================
# SECURITY NOTES
# =============================================================================

# Key Types (in order of preference):
# 1. Ed25519: ssh-keygen -t ed25519 -C "your_email@example.com"
# 2. RSA 4096: ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
# 3. ECDSA: ssh-keygen -t ecdsa -b 521 -C "your_email@example.com"

# Key Management Tips:
# - Use different keys for different purposes (personal, work, etc.)
# - Protect private keys with strong passphrases
# - Use ssh-agent to avoid typing passphrases repeatedly
# - Regularly rotate keys, especially for critical systems

# Connection Security:
# - Always verify host fingerprints on first connection
# - Use jump hosts for accessing internal networks
# - Disable password authentication when possible
# - Use fail2ban or similar tools on servers to prevent brute force

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Debug connection issues:
# ssh -v hostname     # Verbose output
# ssh -vv hostname    # More verbose
# ssh -vvv hostname   # Most verbose

# Test configuration:
# ssh -F ~/.ssh/config -T git@github.com

# List active connections:
# ss -an | grep :22   # On Linux
# netstat -an | grep :22  # On macOS/BSD
